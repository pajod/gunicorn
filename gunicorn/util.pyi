import typing
from typing import Union

from _typeshed import Incomplete

from gunicorn.errors import AppImportError as AppImportError
from gunicorn.glogging import Logger
from gunicorn.sock import TCPSocket as TCPSocket
from gunicorn.workers import SUPPORTED_WORKERS as SUPPORTED_WORKERS
from gunicorn.workers.sync import SyncWorker

REDIRECT_TO: Incomplete
hop_headers: Incomplete

def load_entry_point(distribution, group, name): ...
def load_class(uri: str, default: str = ..., section: str = ...) -> type[Logger] | type[SyncWorker]: ...

positionals: Incomplete

def get_arity(f: typing.Callable) -> int: ...
def get_username(uid: int) -> str: ...
def set_owner_process(uid: int, gid: int, initgroups: bool = ...) -> None: ...
def chown(path, uid, gid) -> None: ...
def unlink(filename: str) -> None: ...
def is_ipv6(addr: str) -> bool: ...
def parse_address(netloc: str, default_port: str = ...) -> tuple[str, int]: ...
def close_on_exec(fd: int | TCPSocket) -> None: ...
def set_non_blocking(fd: int) -> None: ...
def close(sock) -> None: ...
def write_chunk(sock, data) -> None: ...
def write(sock, data, chunked: bool = ...): ...
def write_nonblock(sock, data, chunked: bool = ...): ...
def write_error(sock, status_int, reason, mesg) -> None: ...
def import_app(module: str) -> typing.Callable: ...
def getcwd() -> str: ...
def http_date(timestamp: Incomplete | None = ...): ...
def is_hoppish(header): ...
def daemonize(enable_stdio_inheritance: bool = ...) -> None: ...
def seed() -> None: ...
def check_is_writable(path) -> None: ...
def to_bytestring(value, encoding: str = ...): ...
def has_fileno(obj): ...
def warn(msg) -> None: ...
def make_fail_app(msg): ...
def split_request_uri(uri): ...
def reraise(tp, value, tb: Incomplete | None = ...) -> None: ...
def bytes_to_str(b: bytes | str) -> str: ...
def unquote_to_wsgi_str(string): ...
