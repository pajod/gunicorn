from typing import Type

from _typeshed import Incomplete
from gevent import pywsgi

from gunicorn.http.wsgi import base_environ as base_environ
from gunicorn.sock import ssl_context as ssl_context
from gunicorn.workers.base_async import AsyncWorker as AsyncWorker

VERSION: Incomplete

class GeventWorker(AsyncWorker):
    server_class: type[PyWSGIServer]
    wsgi_handler: type[PyWSGIHandler]
    sockets: Incomplete
    def patch(self) -> None: ...
    def notify(self) -> None: ...
    def timeout_ctx(self): ...
    def run(self) -> None: ...
    def handle(self, listener, client, addr) -> None: ...
    def handle_request(self, listener_name, req, sock, addr) -> None: ...
    def handle_quit(self, sig, frame) -> None: ...
    def handle_usr1(self, sig, frame) -> None: ...
    def init_process(self) -> None: ...

class GeventResponse:
    status: Incomplete
    headers: Incomplete
    sent: Incomplete
    def __init__(self, status, headers, clength) -> None: ...

class PyWSGIHandler(pywsgi.WSGIHandler):
    def log_request(self) -> None: ...
    def get_environ(self): ...

class PyWSGIServer(pywsgi.WSGIServer): ...

class GeventPyWSGIWorker(GeventWorker):
    server_class = PyWSGIServer
    wsgi_handler = PyWSGIHandler
