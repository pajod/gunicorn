[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
# see https://packaging.python.org/en/latest/specifications/pyproject-toml/
name = "gunicorn"
authors = [{name = "Benoit Chesneau", email = "benoitc@gunicorn.org"}]
license = {text = "MIT"}
description = "WSGI HTTP Server for UNIX"
readme = "README.rst"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Internet",
    "Topic :: Utilities",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: WSGI",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Server",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.7"
dependencies = [
    'importlib_metadata; python_version<"3.8"',
    "packaging",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://gunicorn.org"
Documentation = "https://docs.gunicorn.org"
"Issue tracker" = "https://github.com/benoitc/gunicorn/issues"
"Source code" = "https://github.com/benoitc/gunicorn"
Changelog = "https://docs.gunicorn.org/en/stable/news.html"

[project.optional-dependencies]
gevent = ["gevent>=1.4.0"]
eventlet = ["eventlet>=0.24.1"]
tornado = ["tornado>=0.2"]
gthread = []
setproctitle = ["setproctitle"]
testing = [
    "gevent",
    "eventlet",
    "coverage",
    "pytest",
    "pytest-cov",
]

[project.scripts]
# duplicates "python -m gunicorn" handling in __main__.py
gunicorn = "gunicorn.app.wsgiapp:run"

# note the quotes around "paste.server_runner" to escape the dot
[project.entry-points."paste.server_runner"]
main = "gunicorn.app.pasterapp:serve"

[tool.pytest.ini_options]
# # can override these: python -m pytest --override-ini="addopts="
norecursedirs = ["examples", "lib", "local", "src"]
testpaths = ["tests/"]
addopts = "--assert=plain --cov=gunicorn --cov-report=xml"

[tool.setuptools]
zip-safe = false
include-package-data = true
license-files = ["LICENSE"]

[tool.setuptools.packages]
find = {namespaces = false}

[tool.setuptools.dynamic]
version = {attr = "gunicorn.__version__"}

[tool.mypy]
# protect against typos here
warn_unused_configs = true
no_implicit_reexport = true
warn_unused_ignores = true
strict_equality = true

[[tool.mypy.overrides]]
# gevent known to not be typed
module = "eventlet"
ignore_missing_imports = true

[[tool.mypy.overrides]]
# gevent known to not be typed
module = "gevent"
ignore_missing_imports = true

[tool.pypuprade]
# pyupgrade does not read this. specify --py37-plus yourself

[tool.black]
line-length = 119
target-version = ["py37", "py38", "py39", "py310", "py311", "py312"]

[tool.isort]
line_length = 119
# changes stdlib category - all or auto (=current) can produce inconsistent results
# py_version = "py310"
profile = "black"

[tool.pylint."main"]
# section renamed
ignore = ["build", "docs", "examples", "scripts", "_compat.py", "_gaiohttp.py",]

[tool.pylint."format"]
max-line-length = 120

[tool.pylint."messages control"]
disable = [
  "raw-checker-failed",
  "bad-inline-option",
  "locally-disabled",
  "file-ignored",
  "suppressed-message",
  "useless-suppression",
  "deprecated-pragma",
  "use-symbolic-message-instead",
  "use-implicit-booleaness-not-comparison-to-string",
  "use-implicit-booleaness-not-comparison-to-zero",
  "attribute-defined-outside-init",
  "bad-mcs-classmethod-argument",
  "bare-except",
  "broad-exception-caught",
  "duplicate-bases",
  "duplicate-code",
  "eval-used",
  "fixme",
  "import-error",
  "import-outside-toplevel",
  "import-self",
  "inconsistent-return-statements",
  "invalid-name",
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  "no-else-return",
  "no-member",
  "no-self-argument",
  "no-staticmethod-decorator",
  "not-callable",
  "protected-access",
  "raise-missing-from",
  "redefined-outer-name",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-nested-blocks",
  "too-many-public-methods",
  "too-many-statements",
  "wrong-import-position",
  "wrong-import-order",
  "ungrouped-imports",
  "unused-argument",
  "useless-object-inheritance",
  "useless-import-alias",
  "comparison-with-callable",
  "try-except-raise",
  "consider-using-with",
  "consider-using-f-string",
  "unspecified-encoding",
]
